# Copyright Â© 2021, 2022, 2023 Emmanuel Roubion -*- mode: shell-script ;-*-
#
# Author: Emmanuel Roubion
# URL: https://github.com/maanuair/dotfiles

# This file is part of Emmanuel's Roubion dot files, released under
# the MIT License as published by the Massachusetts Institute of Technology
#
# These dotfiles are distributed in the hope they wil lbe useful, but
# without any warranty. See the MIT License for more details
#
# You should have received a copy of the MIT License along with this file.
# If not, see https://opensource.org/licenses/mit-license.php

# A few shell helper functions, bash and zsh compatible.

# Ask the given $1 question, read answer until it matches a choice in given $2 array.
# Empty answer (Enter) will match $3 choice when specified
# Another unexpected answer will ask again.
function ask () {
  # Inputs check
  if [[ $# != 2 && $# != 3 ]]; then
    myErr "Function $FUNCNAME: bad arguments count, ignored."
    myErr "Synopsis: $FUNCNAME \"So we quit?\" \"[y|yes|Y|n|no|N]\" [\"N\"]"
    return;
  else
    # Ask!
    local REGEXP="^"`echo $2 | tr '[]' '()'`"$"
    local response
    local timeout=2
    while true; do
      if [[ "$(getShell)" == "zsh" ]]; then
        read -t $timeout "response?$1 $2 "
      else
        read -t $timeout -r -p "$1 $2 " response
      fi
      if [[ "$response" == '' ]]; then
        echo $3
        break
      elif [[ "$response" =~ $REGEXP ]]; then
        echo $response
        break
      else
        # We loop until an expected response is given
        :
      fi
    done
    # if [[ "$(getShell)" == "zsh" ]]; then
    #   echo
    # fi
  fi
}

# Echo the detected OS: osx, linux or windows (cygwin, MinGW...)
function getOS () {
  case "$(uname -s)" in
    Darwin)
      echo 'osx';;
    Linux)
      echo 'linux';;
    CYGWIN*)
      echo 'cygwin';;
    *) # Including MINGW32*|MSYS*...
      echo "$(uname -s) Unsupported !" 1>&2 ;;
  esac
}

# Echo the current shell used (bash, or zsh)
function getShell () {
  local shell
  if [[ "$BASH_VERSION" != '' ]]; then
    shell=bash
  fi
  if [[ "$ZSH_VERSION" != '' ]]; then
    shell=zsh
  fi
  if [[ "$BASH_VERSION" != '' && "$ZSH_VERSION" != '' ]]; then
    myErr "Cannot figure out the current shell."
    exit -1a
  fi
  echo "$shell"
}

# Return the time stamps directory, in which the script stores its tile stamps file
function getTimestampsDir() {
  # The timestamps directory
  local dir="${HOME}/.myTimestamps"

  # Make sure it exists
  if [[ ! -d "${dir}" ]]; then
    mkdir -p "${dir}"
  fi
  echo "${dir}"
}

# Is the given $1 timestamp file still valid with the given $2 lifetime in minutes?
# Return 0 if valid, 1 otherwise
function isTimestampAliveInMinutes() {
  # Check whether the given time stamp file exists AND is newer than the given minutes value
  local file="$(getTimestampsDir)/${1}"
  local exitCode=0
  if [[ -f "${file}" && $(find "$file" -mtime -${2}m -print) ]]; then
    # Timestamp is alive
    exitCode=0
  else
    # Timestamp has expired, or does not exist
    exitCode=1
  fi
  return exitCode
}

# Touch the timestamp file for the given $1 setup
function touchSetupTimestamp() {
  local file="$(getTimestampsDir)/$1"
  touch "${file}"
  myOutTab "Touched timestamp file: \"$file\""
}

function myIndent() {
  local indentSize=2
  local indent=1
  if [ -n "$1" ]; then indent=$1; fi
  pr -to $(($indent * $indentSize))
}

# Some common ANSI escape codes
ANSI_reset="\033[0m"
ANSI_bold="\033[1m"
ANSI_bold_off="\033[22m"
ANSI_faint="\033[2m"
ANSI_faint_off="\033[22m"
ANSI_italic="\033[3m"
ANSI_italic_off="\033[23m"
ANSI_underline="\033[4m"
ANSI_underline_off="\033[24m"
ANSI_blinking="\033[5m"
ANSI_blinking_off="\033[25m"
ANSI_inverse="\033[7m"
ANSI_inverse_off="\033[27m"
ANSI_invisible="\033[8m"
ANSI_invisible_off="\033[28m"
ANSI_strikethrough="\033[9m"
ANSI_strikethrough_off="\033[29m"
ANSI_fg_BK="\033[30m"
ANSI_fg_RD="\033[31m"
ANSI_fg_GN="\033[32m"
ANSI_fg_YW="\033[33m"
ANSI_fg_BE="\033[34m"
ANSI_fg_MA="\033[35m"
ANSI_fg_CN="\033[36m"
ANSI_fg_WE="\033[37m"
ANSI_fg_BBK="\033[90m%"
ANSI_fg_BRD="\033[91m%"
ANSI_fg_BGN="\033[92m%"
ANSI_fg_BYW="\033[93m%"
ANSI_fg_BBE="\033[94m%"
ANSI_fg_BMA="\033[95m%"
ANSI_fg_BCN="\033[96m%"
ANSI_fg_BWE="\033[97m%"
ANSI_bg_BK="\033[40m"
ANSI_bg_RD="\033[41m"
ANSI_bg_GN="\033[42m"
ANSI_bg_YW="\033[43m"
ANSI_bg_BE="\033[44m"
ANSI_bg_MA="\033[45m"
ANSI_bg_CN="\033[46m"
ANSI_bg_WE="\033[47m"
ANSI_bg_BBK="\033[100m"
ANSI_bg_BRD="\033[101m"
ANSI_bg_BGN="\033[102m"
ANSI_bg_BYW="\033[103m"
ANSI_bg_BBE="\033[104m"
ANSI_bg_BMA="\033[105m"
ANSI_bg_BCN="\033[106m"
ANSI_bg_BWE="\033[107m"

# Do we display our script output / debug info or not?
export myOutEnabled=true
export myDebugEnable=true

# Some log helpers
function myOut () {
  # A litle bit of blue
  if [[ "$myOutEnabled" == 'true' ]]; then
    printf "%s [${ANSI_fg_BE}DOT-INFOR${ANSI_reset}] ${@}${ANSI_reset}\n" `date "+%H:%M:%S"`
  fi;
}

function myOutTab () {
  if [[ "$myOutEnabled" == 'true' ]]; then
    myOut "  ${ANSI_faint}==> ${@}"
  fi
}

function myErr () {
  # A little bit of red, redirected to stderr
  printf "%s [${ANSI_fg_RD}DOT-ERROR${ANSI_reset}] ${@}\n" `date "+%H:%M:%S"` 1>&2
}

function myErrTab () {
  myErr "  ${ANSI_faint}==> ${@}"
}

function myDebug () {
  # And a little bit of black on gren
  if [[ "$myDebugEnabled" == 'true' ]]; then
    printf "%s [${ANSI_fg_BK}${ANSI_bg_GN}DOT-DEBUG${ANSI_reset}] ${@}\n" `date "+%H:%M:%S"`
  fi
}

# Set up aliases
function setupAliases () {
  myOut "Setting up aliases..."
  sourceOrWarn "${HOME}/.shell_aliases"
}

# Set some env vars
function setupEnvVars () {
  myOut "Setting up environment variables..."

  # Locales:
  export LANGUAGE=fr_FR.UTF-8
  export LANG=fr_FR.UTF-8
  export LC_ALL=fr_FR.UTF-8

  # Set up the dictionaries path
  export DICPATH="~/Library/Spelling"

  # Set up the PAGER
  export PAGER=/usr/bin/less

  # Set up common PATHs
  # Former directories included: "$HOME/.npm_packages/bin" "$HOME/go/bin"
  for dir in "$HOME/bin" "$HOME/.local/bin"
  do
    if [[ -d "$dir" ]]
    then
      export PATH="${dir}:$PATH"
    else
      myOutTab "Directory $dir does not exist, cannot be added to PATH"
    fi
  done

  # OSX specific env vars
  if [[ `getOS` == 'osx' ]]; then
    # DICTIONARY: used by Hunspell, required on osx only apparently
    export DICTIONARY=en_GB

    # EDITOR: which emacs to use?
    myOutTab "Choosing emacs to use..."

    # Prefer emacs in $HOME/bin, if there...
    local EMACS="$HOME/bin/emacs"
    if [[ ! -x "$EMACS" ]]; then
      # Otherwise, take the one in /Applications
      EMACS="/Applications/Emacs.app/Contents/MacOS/Emacs"
    fi

    # Set EDITOR
    export EDITOR="${EMACS}"
    myOutTab "Using EDITOR=${EMACS}"

    # Now, emacsclient
    local EMACSCLIENT="$HOME/bin/ec"
    if [[ ! -x "$EMACSCLIENT" ]]; then
      EMACSCLIENT="/Applications/Emacs.app/Contents/MacOS/Emacs"
    fi

    # GROOVY_HOME: I had to use Groovy sometimes...
    local GHOME="$(brew --prefix)/opt/groovy/libexec"
    if [[ -d "$GHOME" ]]; then
      export GROOVY_HOME="$GHOME"
    fi

    # GEM_HOME: setup the RubyGems env, for sudo-less cocoapods
    local GEM_HOME="${HOME}/.gem"
    if [[ -d "${GEM_HOME}" ]]; then
      export GEM_HOME
      export PATH="${PATH}:${GEM_HOME}/ruby/2.0.0/bin"
    fi

    # ANDROID_HOME: I even used Android Studio at some point :)
    local AHOME="${HOME}/Library/Android/sdk"
    if [[ -d "$AHOME" ]]; then
      export ANDROID_HOME="$AHOME"
      export ANDROID_SDK_ROOT="$AHOME"
      export PATH="${PATH}:${AHOME}/tools:${AHOME}/tools/bin:${AHOME}/platform-tools:${AHOME}/emulator"
    fi

    # Visual Studio Code
    local VSC_HOME="/Applications/Visual Studio Code.app/Contents/Resources/app/bin"
    if [[ -d "$VSC_HOME" ]]; then
      export PATH="${PATH}:${VSC_HOME}"
    fi

    # QT5
    local QT_HOME="/usr/local/opt/qt@5"
    if [[ -d "$QT_HOME" ]]; then
      export PATH="$PATH:$QT_HOME/bin"
      # export LDFLAGS="-L$QTH_OME/lib"
      # export CPPFLAGS="-I$QT_HOME5/include"
    fi

    # bat command theme
    if command -v bat &> /dev/null; then
      export BAT_THEME=zenburn
    fi
  fi
}

# Set up git
function setupGit() {
  myOut "Setting up git..."

  # Check whether we need to... check :-)
  local minutes="$(expr 24 \* 60)"
  if isTimestampAliveInMinutes "$0" "${minutes}"; then
    myOutTab "git check... Already done in last ${minutes} minutes, no need to check again..."
  else
    myOutTab "git check..."
    if [[ `getOS` != 'osx' ]]; then
      myErr "git check: NOT checking on non-macOS systems, sorry."
    else
      if brew ls --versions git > /dev/null; then
        # Git is already installed !
        myOutTab "Git has been already installed with Homebrew package manager."
      else
        # Git not installed with brew
        local GIT_CMD="brew install git"
        myErr "Git is not installed with brew, version is \"`git --version`\""
        myOutTab "You may want to install git through Homebrew package manager with (otherwise, completions will not work):"
        myOutTab "${GIT_CMD}"
      fi
      touchSetupTimestamp "$0"
    fi
  fi
}

# Set up homeshick
function setupHomeshick () {
  myOut "Setting up homeshick..."

  # Go through setup...
  local HOMESHICK="${HOME}/.homesick/repos/homeshick/homeshick.sh"
  if [[ -f "${HOMESHICK}" ]]; then
    # Loads homeshick
    source "${HOMESHICK}"

    # With bash, we source the completions
    # (zsh has its own completion code)
    if [[ "$(getShell)" == "bash" ]]; then
      local HOMESHICK_COMPL="${HOME}/.homesick/repos/homeshick/completions/homeshick-completion.bash"
      source "${HOMESHICK_COMPL}"
    fi

    # Now, we refresh repos
    myOutTab "homeshick --quiet refresh..."
    homeshick --quiet refresh

    # Check whether we need to... "homeshick check"
    local minutes="$(expr 24 \* 60 \* 5)" # 5 days in minutes
    if isTimestampAliveInMinutes "$0" "${minutes}"; then
      myOutTab "homeshick check... Already done in last ${minutes} minutes, no need to check again..."
    else
      myOutTab "homeshick check..."
      homeshick check
      touchSetupTimestamp "$0"
    fi
  else
    myErrTab "Not found: ${HOMESHICK}"
    # Clone it now ?
    local GITCMD="git clone git://github.com/andsens/homeshick.git \"${HOME}/.homesick/repos/homeshick\""
    if [[ $(ask "Clone it from github now?" "[Y|n]" Y) == Y ]]; then
      eval "${GITCMD}" && echo && myOutTab "You will have to source \"${HOMESHICK}\" and \"${HOMESHICK_COMPL}\" manually" && echo
    else
      myOutTab "You may want to clone it later with following command:"
      myOutTab "${GITCMD}"
    fi
  fi
}

# Set up NodeJS
function setupNode() {
  myOut "Setting up Node env..."

  # Is NodeJS installed ?
  if [[ `getOS` == 'osx' ]]; then
    export NVM_DIR="$HOME/.nvm"
    if [[ -d "${NVM_DIR}" ]]; then
      local NVM_SH="$NVM_DIR/nvm.sh"
      local NVM_UPGRADE_CMD='( cd "$NVM_DIR"; git fetch origin; git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" origin`; ) && . "$NVM_DIR/nvm.sh"'
      myOutTab "Sourcing $NVM_SH..."
      . "${NVM_SH}"
      myOutTab "Reminder: to manually upgrade, run: ${NVM_UPGRADE_CMD}"

      # Load Bash completions
      if [[ "$(getShell)" == "bash" ]]; then
        myOutTab "Bash detected: sourcing bash completions ${NVM_COMP}..."
        local NVM_COMP="$NVM_DIR/bash_completion"
        [[ -r ${NVM_COMP} ]] && . ${NVM_COMP} || myErr "Not found: ${NVM_COMP}"
      fi
    else
      local NVM_INSTALL_CMD='export NVM_DIR="$HOME/.nvm" && mkdir "$NVM_DIR" && ( git clone https://github.com/creationix/nvm.git "$NVM_DIR"; cd "$NVM_DIR"; git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" origin`;) && . "$NVM_DIR/nvm.sh"'
      myOutTab "Not found: ${NVM_DIR}"
      myOutTab "You may want to install nvm first, by running: "
      myOutTab "${NVM_INSTALL_CMD}"
    fi
  else
    myErr "Not checking Node env on non-macOS systems, sorry."
  fi
}

# Set up Rust environment
function setupRust() {
  myOut "Setting up rust environment..."
  sourceOrWarn "${HOME}/.cargo/env"
}

# Set up the local script, if it exists
function setupLocalScript() {
  local f="${HOME}/.shell_local_script"
  myOut "Setting up local script \"$f\"..."
  sourceOrWarn "$f"
}

# source the given $1 file if it exists and is readable.
# Otherwise output an error with an appropriate message
function sourceOrWarn () {
  # Loading $1 if it exists...
  if [[ -f "${1}" ]]; then
    if [[ -r "${1}" ]]; then
      myOutTab "Sourcing ${1}..."
      source "${1}"
    else
      myErrTab "Not readable: ${1}. Consider fixing permissions."
    fi
  else
    myErrTab "Not found: ${1}. Consider restoring it."
  fi
}
